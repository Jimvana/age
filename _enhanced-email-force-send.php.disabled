<?php
/**
 * Enhanced Force Send Fix for Age Estimator
 * 
 * This fix allows sending emails for any date, not just today
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Check if the Age Estimator plugin is active
if (!defined('AGE_ESTIMATOR_VERSION')) {
    return;
}

// Add this to your theme's functions.php or create a mu-plugin

// Include the debug script after plugin is loaded
add_action('plugins_loaded', function() {
    $debug_file = plugin_dir_path(__FILE__) . 'debug-email-force-send.php';
    if (file_exists($debug_file)) {
        require_once $debug_file;
    }
}, 20);

// Override the original force send handler
add_action('plugins_loaded', function() {
    add_action('init', function() {
        // Check if the required class exists before using it
        if (class_exists('AgeEstimatorAdminEmailSettings')) {
            // Remove original handler if it exists
            remove_action('wp_ajax_age_estimator_force_send_emails', array(AgeEstimatorAdminEmailSettings::get_instance(), 'ajax_force_send_emails'));
        }
        
        // Add enhanced handler
        add_action('wp_ajax_age_estimator_force_send_emails', 'age_estimator_enhanced_force_send_emails');
    });
}, 20);

function age_estimator_enhanced_force_send_emails() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => __('Permission denied.', 'age-estimator')));
    }
    
    if (!wp_verify_nonce($_POST['nonce'], 'age_estimator_force_send')) {
        wp_send_json_error(array('message' => __('Security check failed.', 'age-estimator')));
    }
    
    // Get the date to process (default to today)
    $process_date = isset($_POST['date']) ? sanitize_text_field($_POST['date']) : current_time('Y-m-d');
    
    // Validate date format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $process_date)) {
        $process_date = current_time('Y-m-d');
    }
    
    // Check if emails are enabled
    $send_emails = get_option('age_estimator_send_compliance_emails', 'yes');
    if ($send_emails !== 'yes') {
        wp_send_json_error(array('message' => 'Email sending is disabled in settings.'));
        return;
    }
    
    // Check if required classes exist
    if (!class_exists('AgeEstimatorAPITracker')) {
        wp_send_json_error(array('message' => 'Required classes not loaded. Please ensure the Age Estimator plugin is active.'));
        return;
    }
    
    // Get API tracker instance
    $tracker = AgeEstimatorAPITracker::get_instance();
    
    // First, try to get activity for the specified date
    $user_stats = $tracker->get_user_stats(9999, 0, 'day', $process_date);
    
    // If no activity for today, look for the most recent date with activity
    if (empty($user_stats)) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'age_estimator_api_calls';
        
        // Find the most recent date with activity
        $recent_date = $wpdb->get_var("
            SELECT MAX(call_date) 
            FROM {$table_name} 
            WHERE user_id > 0
        ");
        
        if ($recent_date) {
            $user_stats = $tracker->get_user_stats(9999, 0, 'day', $recent_date);
            $process_date = $recent_date;
        }
    }
    
    if (empty($user_stats)) {
        wp_send_json_error(array(
            'message' => 'No users found with any API activity in the database.'
        ));
        return;
    }
    
    // Count eligible users
    $eligible_users = 0;
    $guest_users = 0;
    $no_email_users = 0;
    $opted_out_users = 0;
    $emails_sent = 0;
    $emails_failed = 0;
    
    // Check if emailer class exists
    if (!class_exists('AgeEstimatorComplianceEmailer')) {
        wp_send_json_error(array('message' => 'Emailer class not loaded. Please ensure the Age Estimator plugin is active.'));
        return;
    }
    
    // Get emailer instance
    $emailer = AgeEstimatorComplianceEmailer::get_instance();
    
    foreach ($user_stats as $user_stat) {
        if ($user_stat['user_id'] > 0) {
            $user = get_user_by('ID', $user_stat['user_id']);
            if ($user && $user->user_email) {
                $opted_out = get_user_meta($user_stat['user_id'], 'age_estimator_compliance_emails_opt_out', true);
                if ($opted_out === 'yes') {
                    $opted_out_users++;
                } else {
                    $eligible_users++;
                    // Send email
                    $sent = $emailer->send_user_compliance_email($user_stat['user_id'], $process_date, 'day');
                    if ($sent) {
                        $emails_sent++;
                    } else {
                        $emails_failed++;
                    }
                }
            } else {
                $no_email_users++;
            }
        } else {
            $guest_users++;
        }
    }
    
    if ($emails_sent === 0 && $eligible_users === 0) {
        $details = array();
        if ($guest_users > 0) $details[] = $guest_users . ' guest users (no email)';
        if ($no_email_users > 0) $details[] = $no_email_users . ' users without email';
        if ($opted_out_users > 0) $details[] = $opted_out_users . ' users opted out';
        
        wp_send_json_error(array(
            'message' => 'No eligible users found for email sending. Found: ' . implode(', ', $details)
        ));
        return;
    }
    
    // Log the email batch
    $log_entry = array(
        'date' => $process_date,
        'count' => $emails_sent,
        'timestamp' => current_time('mysql')
    );
    
    $email_logs = get_option('age_estimator_email_logs', array());
    array_unshift($email_logs, $log_entry);
    $email_logs = array_slice($email_logs, 0, 30);
    update_option('age_estimator_email_logs', $email_logs);
    
    wp_send_json_success(array(
        'message' => sprintf(
            'Email batch completed! Sent %d emails for activity on %s. Found %d total users with activity (%d eligible, %d opted out, %d no email, %d guests).',
            $emails_sent,
            $process_date,
            count($user_stats),
            $eligible_users,
            $opted_out_users,
            $no_email_users,
            $guest_users
        )
    ));
}

// Add a manual date selector to the email settings page
add_action('age_estimator_email_settings_after_tools', function() {
    ?>
    <tr>
        <th scope="row">
            <?php _e('Send Emails for Specific Date', 'age-estimator'); ?>
        </th>
        <td>
            <input type="date" id="force-send-date" value="<?php echo current_time('Y-m-d'); ?>" />
            <button type="button" class="button" id="force-send-specific-date">
                <?php _e('Send Emails for Selected Date', 'age-estimator'); ?>
            </button>
            <span class="specific-date-status"></span>
            <p class="description">
                <?php _e('Send compliance emails for users who had activity on a specific date.', 'age-estimator'); ?>
            </p>
        </td>
    </tr>
    
    <script>
    jQuery(document).ready(function($) {
        $('#force-send-specific-date').click(function() {
            var selectedDate = $('#force-send-date').val();
            if (!selectedDate) {
                alert('Please select a date');
                return;
            }
            
            if (!confirm('Send emails for activity on ' + selectedDate + '?')) {
                return;
            }
            
            var $button = $(this);
            var $status = $('.specific-date-status');
            
            $button.prop('disabled', true);
            $status.html('<span class="spinner is-active" style="float: none;"></span>');
            
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'age_estimator_force_send_emails',
                    nonce: '<?php echo wp_create_nonce('age_estimator_force_send'); ?>',
                    date: selectedDate
                },
                success: function(response) {
                    if (response.success) {
                        $status.html('<span style="color: green;">' + response.data.message + '</span>');
                        setTimeout(function() {
                            location.reload();
                        }, 3000);
                    } else {
                        $status.html('<span style="color: red;">' + response.data.message + '</span>');
                    }
                },
                error: function() {
                    $status.html('<span style="color: red;">Error sending emails.</span>');
                },
                complete: function() {
                    $button.prop('disabled', false);
                }
            });
        });
    });
    </script>
    <?php
});
